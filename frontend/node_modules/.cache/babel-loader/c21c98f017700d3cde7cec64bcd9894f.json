{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreed\\\\OneDrive\\\\Desktop\\\\dnsreal\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title } from 'chart.js';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, Title);\nconst Dashboard = () => {\n  _s();\n  const [resolvedIP, setResolvedIP] = useState('');\n  const [responseTime, setResponseTime] = useState(null);\n  const [error, setError] = useState('');\n  const [responseTimes, setResponseTimes] = useState([]);\n  const [dates, setDates] = useState([]);\n  const handleResolve = async domain => {\n    try {\n      const response = await axios.get(`http://localhost:5000/resolve/${domain}`);\n      setResolvedIP(response.data.ip); // Adjust based on your backend response\n      setResponseTime(response.data.response_time);\n      if (response.data.response_time) {\n        setResponseTimes(prevTimes => [...prevTimes, response.data.response_time]);\n        setDates(prevDates => [...prevDates, new Date().toISOString().split('T')[0]]);\n      }\n    } catch (err) {\n      setError('Error occurred while resolving');\n    }\n  };\n  const data = {\n    labels: dates,\n    datasets: [{\n      label: 'DNS Query Response Time',\n      data: responseTimes,\n      borderColor: 'rgba(75,192,192,1)',\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DNS Query Response Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter domain\",\n      onChange: e => handleResolve(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Resolved IP: \", resolvedIP]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Response Time: \", responseTime ? `${responseTime} seconds` : 'N/A']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"icTM+H3g9aayZOyQ0rUUwAOgHHE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","Title","axios","jsxDEV","_jsxDEV","register","Dashboard","_s","resolvedIP","setResolvedIP","responseTime","setResponseTime","error","setError","responseTimes","setResponseTimes","dates","setDates","handleResolve","domain","response","get","data","ip","response_time","prevTimes","prevDates","Date","toISOString","split","err","labels","datasets","label","borderColor","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/sreed/OneDrive/Desktop/dnsreal/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title } from 'chart.js';\r\nimport axios from 'axios';\r\n\r\nChartJS.register(LineElement, CategoryScale, LinearScale, Title);\r\n\r\nconst Dashboard = () => {\r\n    const [resolvedIP, setResolvedIP] = useState('');\r\n    const [responseTime, setResponseTime] = useState(null);\r\n    const [error, setError] = useState('');\r\n\r\n    const [responseTimes, setResponseTimes] = useState([]);\r\n    const [dates, setDates] = useState([]);\r\n\r\n    const handleResolve = async (domain) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/resolve/${domain}`);\r\n            setResolvedIP(response.data.ip);  // Adjust based on your backend response\r\n            setResponseTime(response.data.response_time);\r\n            if (response.data.response_time) {\r\n                setResponseTimes(prevTimes => [...prevTimes, response.data.response_time]);\r\n                setDates(prevDates => [...prevDates, new Date().toISOString().split('T')[0]]);\r\n            }\r\n        } catch (err) {\r\n            setError('Error occurred while resolving');\r\n        }\r\n    };\r\n\r\n    const data = {\r\n        labels: dates,\r\n        datasets: [\r\n            {\r\n                label: 'DNS Query Response Time',\r\n                data: responseTimes,\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>DNS Query Response Time</h2>\r\n            <Line data={data} />\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Enter domain\"\r\n                onChange={(e) => handleResolve(e.target.value)}\r\n            />\r\n            <p>Resolved IP: {resolvedIP}</p>\r\n            <p>Response Time: {responseTime ? `${responseTime} seconds` : 'N/A'}</p>\r\n            {error && <p>{error}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}