{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreed\\\\OneDrive\\\\Desktop\\\\dnsreal\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title } from 'chart.js';\nimport axios from 'axios';\nimport './App.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, Title);\nconst Dashboard = () => {\n  _s();\n  const [domain, setDomain] = useState('');\n  const [resolvedIP, setResolvedIP] = useState('');\n  const [error, setError] = useState('');\n  const handleResolve = async () => {\n    if (!domain.trim()) {\n      setError('Please enter a domain');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:5000/resolve/${domain}`);\n      setResolvedIP(response.data.ip); // Update based on your backend response\n      setError('');\n    } catch (err) {\n      setResolvedIP('');\n      setError('Error occurred while resolving');\n    }\n  };\n  const data = {\n    labels: ['2024-08-01', '2024-08-02', '2024-08-03', '2024-08-04'],\n    datasets: [{\n      label: 'DNS Query Response Time',\n      data: [120, 80, 95, 110],\n      borderColor: 'rgba(75,192,192,1)',\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DNS Query Response Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter domain\",\n      value: domain,\n      onChange: e => setDomain(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleResolve,\n      children: \"Resolve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Resolved IP: \", resolvedIP]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"vlcqdJLjtJUZMcRv8QFySmIOCKA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","Title","axios","jsxDEV","_jsxDEV","register","Dashboard","_s","domain","setDomain","resolvedIP","setResolvedIP","error","setError","handleResolve","trim","response","get","data","ip","err","labels","datasets","label","borderColor","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sreed/OneDrive/Desktop/dnsreal/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, Title } from 'chart.js';\r\nimport axios from 'axios';\r\nimport './App.css'; // Import the CSS file\r\n\r\nChartJS.register(LineElement, CategoryScale, LinearScale, Title);\r\n\r\nconst Dashboard = () => {\r\n    const [domain, setDomain] = useState('');\r\n    const [resolvedIP, setResolvedIP] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleResolve = async () => {\r\n        if (!domain.trim()) {\r\n            setError('Please enter a domain');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.get(`http://localhost:5000/resolve/${domain}`);\r\n            setResolvedIP(response.data.ip);  // Update based on your backend response\r\n            setError('');\r\n        } catch (err) {\r\n            setResolvedIP('');\r\n            setError('Error occurred while resolving');\r\n        }\r\n    };\r\n\r\n    const data = {\r\n        labels: ['2024-08-01', '2024-08-02', '2024-08-03', '2024-08-04'],\r\n        datasets: [\r\n            {\r\n                label: 'DNS Query Response Time',\r\n                data: [120, 80, 95, 110],\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                fill: false,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>DNS Query Response Time</h2>\r\n            <Line data={data} />\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"Enter domain\"\r\n                value={domain}\r\n                onChange={(e) => setDomain(e.target.value)}\r\n            />\r\n            <button onClick={handleResolve}>Resolve</button>\r\n            <p>Resolved IP: {resolvedIP}</p>\r\n            {error && <p className=\"error\">{error}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}